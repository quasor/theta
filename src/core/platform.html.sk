class HTMLPlatform :: Platform {
	var _os = _currentOS
	var _width = 0
	var _height = 0
	var _density = 0.0
	var _pixelWidth = 0
	var _pixelHeight = 0
	var _context GPU.HTMLContext = null
	var _delegate Platform.Delegate = null
	var _hasFocus = true

	def new {
		try {
			_context = GPU.HTMLContext.new
		} catch e GPU.SetupError {
		}

		var undefined = dynamic.void(0)
		var canvas = _context?.gl.canvas
		var centroid = Vector.new
		var isHidden = false
		var isBlurred = false
		var buttons Platform.Buttons = 0

		var handleFocusChange = => {
			buttons = 0
			_hasFocus = !isBlurred && !isHidden
			if _delegate != null {
				_delegate.handleFocusChange
			}
		}

		var resize = => {
			var width = window.innerWidth
			var height = window.innerHeight
			var density = window.devicePixelRatio

			if width != _width || height != _height || density != _density {
				_width = width
				_height = height
				_density = density
				_pixelWidth = Math.round(width * density) as int
				_pixelHeight = Math.round(height * density) as int
				_context?.resize(_pixelWidth, _pixelHeight, width, height)

				if _delegate != null {
					_delegate.handleResize
				}
			}
		}

		var tick fn() = => {
			# Mobile Safari doesn't report the right size on page load and I'm not
			# sure when the right size shows up, so poll every frame instead
			resize()

			if _delegate != null {
				_delegate.handleFrame
			}
			requestAnimationFrame(tick)
		}

		var shortcutMap IntMap<Platform.Shortcut> = {
			_shortcut(KEY_BACKSPACE, .SHIFT): .DELETE_LEFT_CHARACTER,
			_shortcut(KEY_BACKSPACE, 0): .DELETE_LEFT_CHARACTER,
			_shortcut(KEY_DELETE, .SHIFT): .DELETE_RIGHT_CHARACTER,
			_shortcut(KEY_DELETE, 0): .DELETE_RIGHT_CHARACTER,

			_shortcut(KEY_DOWN, 0): .MOVE_DOWN_LINE,
			_shortcut(KEY_END, 0): .MOVE_RIGHT_LINE,
			_shortcut(KEY_HOME, 0): .MOVE_LEFT_LINE,
			_shortcut(KEY_LEFT, 0): .MOVE_LEFT_CHARACTER,
			_shortcut(KEY_RIGHT, 0): .MOVE_RIGHT_CHARACTER,
			_shortcut(KEY_UP, 0): .MOVE_UP_LINE,

			_shortcut(KEY_DOWN, .SHIFT): .EXTEND_DOWN_LINE,
			_shortcut(KEY_END, .SHIFT): .EXTEND_RIGHT_LINE,
			_shortcut(KEY_HOME, .SHIFT): .EXTEND_LEFT_LINE,
			_shortcut(KEY_LEFT, .SHIFT): .EXTEND_LEFT_CHARACTER,
			_shortcut(KEY_RIGHT, .SHIFT): .EXTEND_RIGHT_CHARACTER,
			_shortcut(KEY_UP, .SHIFT): .EXTEND_UP_LINE,
		}

		var isOSX = _os == .OSX
		var userAgent = navigator.userAgent
		var isIE = "Trident" in userAgent
		var wordFlags KeyFlags = isOSX ? .ALT : .CONTROL
		var shortcutFlags KeyFlags = isOSX ? .META : .CONTROL

		shortcutMap[_shortcut(KEY_BACKSPACE, wordFlags)] = .DELETE_LEFT_WORD
		shortcutMap[_shortcut(KEY_DELETE, wordFlags)] = .DELETE_RIGHT_WORD
		shortcutMap[_shortcut(KEY_LEFT, wordFlags | .SHIFT)] = .EXTEND_LEFT_WORD
		shortcutMap[_shortcut(KEY_LEFT, wordFlags)] = .MOVE_LEFT_WORD
		shortcutMap[_shortcut(KEY_RIGHT, wordFlags | .SHIFT)] = .EXTEND_RIGHT_WORD
		shortcutMap[_shortcut(KEY_RIGHT, wordFlags)] = .MOVE_RIGHT_WORD

		shortcutMap[_shortcut('A', shortcutFlags)] = .SELECT_ALL
		shortcutMap[_shortcut('C', shortcutFlags)] = .COPY
		shortcutMap[_shortcut('V', shortcutFlags)] = .PASTE
		shortcutMap[_shortcut('X', shortcutFlags)] = .CUT
		shortcutMap[_shortcut('Y', shortcutFlags)] = .REDO
		shortcutMap[_shortcut('Z', shortcutFlags | .SHIFT)] = .REDO
		shortcutMap[_shortcut('Z', shortcutFlags)] = .UNDO

		if isOSX {
			shortcutMap[_shortcut(KEY_DOWN, .META | .SHIFT)] = .EXTEND_DOWN_DOCUMENT
			shortcutMap[_shortcut(KEY_DOWN, .META)] = .MOVE_DOWN_DOCUMENT
			shortcutMap[_shortcut(KEY_LEFT, .META | .SHIFT)] = .EXTEND_LEFT_LINE
			shortcutMap[_shortcut(KEY_LEFT, .META)] = .MOVE_LEFT_LINE
			shortcutMap[_shortcut(KEY_RIGHT, .META | .SHIFT)] = .EXTEND_RIGHT_LINE
			shortcutMap[_shortcut(KEY_RIGHT, .META)] = .MOVE_RIGHT_LINE
			shortcutMap[_shortcut(KEY_UP, .META | .SHIFT)] = .EXTEND_UP_DOCUMENT
			shortcutMap[_shortcut(KEY_UP, .META)] = .MOVE_UP_DOCUMENT

			# Emacs bindings (present in all OS X textboxes)
			shortcutMap[_shortcut('A', .CONTROL)] = .MOVE_LEFT_LINE
			shortcutMap[_shortcut('B', .CONTROL)] = .MOVE_LEFT_CHARACTER
			shortcutMap[_shortcut('D', .CONTROL)] = .DELETE_RIGHT_CHARACTER
			shortcutMap[_shortcut('E', .CONTROL)] = .MOVE_RIGHT_LINE
			shortcutMap[_shortcut('F', .CONTROL)] = .MOVE_RIGHT_CHARACTER
			shortcutMap[_shortcut('H', .CONTROL)] = .DELETE_LEFT_CHARACTER
			shortcutMap[_shortcut('K', .CONTROL)] = .DELETE_RIGHT_LINE
		}

		if canvas != null {
			# The wheel event on OS X is nice and simple
			if isOSX {
				canvas.addEventListener("wheel", (e HTMLWheelEvent) => {
					# Chrome, Safari, and Firefox on OS X for a trackpad: +/- 1 pixel (or a real mouse disguised as a trackpad by Chrome and Safari, no way to know for sure)
					if e.deltaMode == e.DOM_DELTA_PIXEL {
						if e.ctrlKey || e.metaKey {
							_delegate.handlePinch(e.pageX, e.pageY, e.deltaY) # Chrome-only pinch zoom support
						} else {
							_delegate.handleScroll(e.deltaX, e.deltaY) # Two-finger scrolling to pan around
						}
						e.preventDefault
					}

					# Firefox on OS X for a real mouse: +/- 1 lines (not actual notches due to accelerated scrolling)
					else {
						_handleNotchedPinch(e, e.deltaY)
					}
				})
			}

			# The wheel event on Windows is a disaster
			else {
				# IE returns random crap for "e.deltaY" in the "wheel" event. For example,
				# I get 59.099998474121094 for a maximized window with Developer Tools open.
				# I have no idea what the relationship is between these values and wheel
				# notches but it's definitely non-linear. Anyway, the "mousewheel" event
				# seems to report +/- 120 reliably, so use that instead.
				if isIE {
					canvas.addEventListener("mousewheel", (e HTMLMouseWheelEvent) => {
						_handleNotchedPinch(e, -e.wheelDelta / 120)
					})
				}

				# Firefox on Windows: +/- 3 lines
				# Chrome on Windows: +/- 100 pixels
				else {
					canvas.addEventListener("wheel", (e HTMLWheelEvent) => {
						_handleNotchedPinch(e, e.deltaY / (e.deltaMode == e.DOM_DELTA_LINE ? 3 : 100))
					})
				}
			}

			canvas.addEventListener("touchstart", (e HTMLTouchEvent) => {
				e.preventDefault

				if _delegate != null {
					var touches = e.touches
					_computeCentroid(touches, centroid)
					_delegate.handleTouchStart(centroid.x, centroid.y, _computeDistance(touches, centroid), touches.count)
				}
			})

			canvas.addEventListener("touchmove", (e HTMLTouchEvent) => {
				if _delegate != null {
					var touches = e.touches
					_computeCentroid(touches, centroid)
					_delegate.handleTouchMove(centroid.x, centroid.y, _computeDistance(touches, centroid), touches.count)
				}
			})

			canvas.addEventListener("touchend", (e HTMLTouchEvent) => {
				if _delegate != null {
					var touches = e.touches
					_computeCentroid(touches, centroid)
					_delegate.handleTouchEnd(centroid.x, centroid.y, _computeDistance(touches, centroid), touches.count)
				}
			})

			canvas.addEventListener("mousedown", (e HTMLMouseEvent) => {
				e.preventDefault

				if _delegate != null {
					var button = e.button
					if e.buttons != undefined {
						buttons = _buttonsFromMouseEvent(e)
					} else {
						# Safari is lame
						buttons |=
							button == 0 ? .LEFT :
							button == 1 ? .MIDDLE :
							button == 2 ? .RIGHT :
							0
					}
					_delegate.handleMouseDown(e.pageX, e.pageY, buttons)
				}
			})

			canvas.addEventListener("mousemove", (e HTMLMouseEvent) => {
				if _delegate != null {
					if e.buttons != undefined {
						buttons = _buttonsFromMouseEvent(e)
					}
					_delegate.handleMouseMove(e.pageX, e.pageY, buttons)
				}
			})

			canvas.addEventListener("mouseup", (e HTMLMouseEvent) => {
				if _delegate != null {
					var button = e.button
					if e.buttons != undefined {
						buttons = _buttonsFromMouseEvent(e)
					} else {
						# Safari is lame
						buttons &=
							button == 0 ? ~.LEFT :
							button == 1 ? ~.MIDDLE :
							button == 2 ? ~.RIGHT :
							~0
					}
					_delegate.handleMouseUp(e.pageX, e.pageY, buttons)
				}
			})
		}

		document.addEventListener("keydown", (e HTMLKeyboardEvent) => {
			var key = _shortcut(e.which,
				(e.altKey ? .ALT : 0) |
				(e.metaKey ? .META : 0) |
				(e.shiftKey ? .SHIFT : 0) |
				(e.ctrlKey ? .CONTROL : 0))

			if key in shortcutMap {
				e.preventDefault
				if _delegate != null {
					_delegate.handleShortcut(shortcutMap[key])
				}
			}
		})

		document.addEventListener("keypress", (e HTMLKeyboardEvent) => {
			var c = e.which
			if _delegate != null && !(isOSX ? e.metaKey : e.ctrlKey) && (
				Glyph.isWordCodePoint(c) ||
				c >= '0' && c <= '9' ||
				string.fromCodePoint(c) in ".<>≤≥=+-*/÷√()[]^_,!|"
			) {
				e.preventDefault
				_delegate.handleCodePoint(c)
			}
		})

		document.addEventListener("visibilitychange", => {
			isHidden = document.hidden
			handleFocusChange()
		})

		window.addEventListener("blur", => {
			isBlurred = true
			handleFocusChange()
		})

		window.addEventListener("focus", => {
			isBlurred = false
			handleFocusChange()
		})

		window.addEventListener("resize", resize)
		resize()
		tick()

		if _context != null {
			_context.gl.getExtension("OES_standard_derivatives")
			_context.clear(.WHITE)
			document.body.appendChild(canvas)
		}
	}

	def os Platform.OS {
		return _os
	}

	def hasFocus bool {
		return _hasFocus
	}

	def width int {
		return _width
	}

	def height int {
		return _height
	}

	def density double {
		return _density
	}

	def pixelWidth int {
		return _pixelWidth
	}

	def pixelHeight int {
		return _pixelHeight
	}

	def seconds double {
		return performance.now / 1000
	}

	def context GPU.Context {
		return _context
	}

	def setDelegate(delegate Platform.Delegate) {
		_delegate = delegate
	}

	def setCursor(cursor Platform.Cursor) {
		document.body.style.cursor =
			cursor == .MOVE ? "move" :
			cursor == .TEXT ? "text" :
			"default"
	}

	def parseNumber(text string) double {
		return +(text as dynamic)
	}

	def setRoute(text string) {
		if route != null {
			# history.replaceState(null, "", encodeURI(URL_PREFIX + text))
		}
	}

	def route string {
		var path string = location.pathname
		return path == "/" ? "" : path.startsWith(URL_PREFIX) ? decodeURI(path.slice(URL_PREFIX.count)) : null
	}

	def fetchResource(name string, callback fn(Uint8Array)) {
		var xhr = XMLHttpRequest.new
		xhr.open("GET", route != null ? "/" + name : name)
		xhr.onload = => callback(Uint8Array.new(xhr.response))
		xhr.responseType = "arraybuffer"
		xhr.send
	}

	def _computeCentroid(touches List<HTMLTouch>, centroid Vector) {
		centroid.set(0, 0)
		for touch in touches {
			centroid.x += touch.pageX
			centroid.y += touch.pageY
		}
		centroid /= touches.count
	}

	def _computeDistance(touches List<HTMLTouch>, centroid Vector) double {
		var distance = 0.0
		for touch in touches {
			var dx = touch.pageX - centroid.x
			var dy = touch.pageY - centroid.y
			distance += Math.sqrt(dx * dx + dy * dy)
		}
		return distance / touches.count
	}

	def _buttonsFromMouseEvent(e HTMLMouseEvent) Platform.Buttons {
		return
			((e.buttons & 1) != 0 ? .LEFT : 0) |
			((e.buttons & 2) != 0 ? .MIDDLE : 0) |
			((e.buttons & 4) != 0 ? .RIGHT : 0)
	}

	def _handleNotchedPinch(e HTMLMouseEvent, wheelNotches double) {
		if _delegate != null {
			_delegate.handlePinch(e.pageX, e.pageY, wheelNotches * 16)
		}
		e.preventDefault
	}
}

namespace HTMLPlatform {
	flags KeyFlags {
		ALT
		META
		SHIFT
		CONTROL
	}

	const URL_PREFIX = "/app/"
	const KEY_BACKSPACE = 8
	const KEY_END = 35
	const KEY_HOME = 36
	const KEY_LEFT = 37
	const KEY_UP = 38
	const KEY_RIGHT = 39
	const KEY_DOWN = 40
	const KEY_DELETE = 46

	def _shortcut(which int, flags KeyFlags) int {
		return which | (flags << 8)
	}

	def _currentOS Platform.OS {
		var platform = navigator.platform
		var userAgent = navigator.userAgent
		return
			# OS X encodes the architecture into the platform
			platform == "MacIntel" || platform == "MacPPC" ? .OSX :

			# MSDN sources say Win64 is used
			platform == "Win32" || platform == "Win64" ? .WINDOWS :

			# Assume the user is using Mobile Safari or Chrome and not some random
			# browser with a strange platform (Opera apparently messes with this)
			platform == "iPhone" || platform == "iPad" ? .IOS :

			# Apparently most Android devices have a platform of "Linux" instead
			# of "Android", so check the user agent instead. Also make sure to test
			# for Android before Linux for this reason.
			"Android" in userAgent ? .ANDROID :
			"Linux" in platform ? .LINUX :

			# The platform string has no specification and can be literally anything.
			# Other examples: "BlackBerry", "Nintendo 3DS", "PlayStation 4", etc.
			.UNKNOWN
	}
}
